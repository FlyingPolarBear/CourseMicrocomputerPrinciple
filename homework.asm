#make_BIN#

DSEG SEGMENT 'DATA'

STRING DB 10H DUP(?)
BUFFER DB 40H DUP(?)
COUNT0 DW 0H
COUNT1 DW 0H
COUNT2 DW 0H

STRING_MENU DB 'PLEASE INPUT FUNCTION NUMBER(1~5):$'
FUNCTION_END DB 'FUNCTION END. ENTER SPACE TO RETUN MAIN MENU, OR ANY KEY TO RERUN.$'
COMMAND_ERROR DB 'WRONG COMMAND!$'
INPUT_ERROR DB 'ILLEAL CHARACTER! PLEASE INPUT AGAIN!$'

FUN1_INPUT DB 'FUNCTION1: PLEASE INPUT A STRING.$'
FUN1_OUTPUT DB 'THE CHANGED STRING IS:$'
FUN2_INPUT DB 'FUNCTION2: PLEASE INPUT A STRING.$'
FUN2_OUTPUT DB 'THE MAXIMUM IS:$'
FUN3_INPUT DB 'FUNCTION3: PLEASE INPUT SEVERAL NUMBERS(0~255):.$'
FUN3_OUTPUT DB 'THE SORTED NUMBERS ARE:$'
ADJUST_TIME DB 'ADJUST TIME HERE(HH MM TT), END WITH ENTER:$'
CLRF DB 0AH,0DH,'$'
TEN DB 0AH
HUN DB 60H
ADD HUN,04H

PUTENTER MACRO
	LEA DX,CLRF
	MOV AH,09H
	INT 21H
	ENDM

PUTCHAR MACRO
	MOV AH,02H
	INT 21H
	ENDM

PUTS MACRO STRING
	LEA DX,STRING
	MOV AH,09H
	INT 21H
	ENDM

GETCHAR MACRO
	MOV AH,01H
	INT 21H
	ENDM
	
GETS MACRO
	MOV AX,0AH
	INT 21H
	ENDM

FUN_END MACRO FUNCTION;函数结束后返回

	PUTENTER
	PUTS FUNCTION_END
	GETCHAR
	
	CMP AL,' '
	JNZ FUNCTION
	JMP MAIN_MENU
	
	ENDM
;********************Main_menu********************
MAIN_MENU:
	PUTENTER
	PUTS STRING_MENU;输出菜单指引
	PUTENTER
	GETCHAR;输入函数名
CMP1:	CMP AL,'1'
	JNZ CMP2
	JMP FUNCTION1
CMP2:	CMP AL,'2'
	JNZ CMP3
	JMP FUNCTION2
CMP3:	CMP AL,'3'
	JNZ CMP4
	JMP FUNCTION3
CMP4:	CMP AL,'4'
	JNZ CMP5
	JMP FUNCTION4
CMP5:	CMP AL,'5'
	JNZ ERROR
	JMP FUNCTION5

ERROR:
	PUTS COMMAND_ERROR;输出错误指令
	JMP MAIN_MENU
	
;********************Function1********************
FUNCTION1:
	PUTENTER
	PUTS FUN1_INPUT
	LEA BX,STRING
	
F1_1:	GETCHAR
	MOV [BX],AL
	CMP AL,0DH
	JZ END_1;检测到回车退出
	CMP [BX],30H
	JB ERROR_1;小于错误
	CMP [BX],61H
	JB F1_2
	CMP [BX],7AH
	JBE F1_EXCHANGE
	JMP ERROR_1;大于错误

ERROR_1:;错误输入
	PUTENTER
	PUTS INPUT_ERROR
	JMP F1_1
	
F1_EXCHANGE:;小写转换大写
	SUB [BX],20H
	JMP F1_2
	
F1_2:	INC BX;添加字符
	JMP F1_1
	
END_1:	MOV [BX],'$';末尾加一个$
	PUTENTER
	PUTS FUN1_OUTPUT
	PUTS STRING
	FUN_END FUNCTION1
		
;********************Function2********************
FUNCTION2:
	PUTENTER
	PUTS FUN2_INPUT
	
F2_1:	GETCHAR
	CMP AL,0DH
	JZ END_2;检测到回车退出
	CMP AL,30H
	JB ERROR_2;小于错误
	CMP AL,7AH
	JA ERROR_2;大于错误
	CMP AL,BL
	JA F2_EXCHANGE;找到最大值
	JMP F2_1
	
ERROR_2:;错误输入
	PUTENTER
	PUTS INPUT_ERROR
	JMP F2_1
	
F2_EXCHANGE:;取最大值
	MOV BL,AL
	JMP F2_1

END_2:	PUTENTER
	PUTS FUN2_OUTPUT
	MOV DL,BL
	PUTCHAR
	
	FUN_END FUNCTION2
	
;********************Function3********************
FUNCTION3:
	PUTENTER
	PUTS FUN3_INPUT
	MOV CX,40H
	LEA BX,BUFFER
	
F3_0:	MOV [BX],0H
	INC BX
	LOOP F3_0
	
	MOV CX,0H
	LEA BX,BUFFER

;下面是输入
F3_1:	GETCHAR
	CMP AL,0DH
	JZ LOOP1_1;检测到回车退出
	CMP AL,' '
	JZ F3_2
	CMP AL,30H
	JB ERROR_3;小于错误
	CMP AL,40H
	JB F3_2
	JMP ERROR_3;大于错误
	
ERROR_3:;错误输入
	PUTENTER
	PUTS INPUT_ERROR
	JMP F3_1

F3_2:	CMP AL,' '
	JZ MAKE_LIST
	PUSH AX
	MOV AL,[BX]
	MUL TEN;[BX]乘10
	MOV [BX],AL
	POP AX
	SUB AL,30H
	ADD [BX],AL
	JMP F3_1
	
MAKE_LIST:
	INC BX
	INC CX
	JMP F3_1

;下面是冒泡排序

F3_EXCHANGE:
	XCHG DL,[BX+1]
	MOV [BX],DL;交换[BX]和[BX+1]
	JMP LOOP2_3

;LOOP1 START
LOOP1_1:MOV COUNT0,CX
	CMP CX,00H
	JZ END_3
	INC COUNT0
LOOP1_2:MOV COUNT1,CX
	LEA BX,BUFFER

;LOOP2 START	
LOOP2_1:MOV COUNT2,CX
LOOP2_2:MOV DL,[BX]
	CMP DL,[BX+1];比较[BX]和[BX+1]
	JA F3_EXCHANGE
LOOP2_3:INC BX
	MOV CX,COUNT2
	LOOP LOOP2_1
;LOOP2 END
	
LOOP1_3:MOV CX,COUNT1
	LOOP LOOP1_2
;LOOP1 END

;下面是输出
F3_3:	PUTENTER
	PUTS FUN3_OUTPUT
	MOV CX,COUNT0
	LEA BX,BUFFER
	
F3_4:	MOV AH,0H
	MOV AL,[BX]
	DIV HUN
	CMP AL,0H
	JZ F3_5;两位数不输出百位
	MOV DL,AL
	ADD DL,30H
	PUSH AX
	PUTCHAR;输出百位
	POP AX
F3_5:	MOV AL,AH
	MOV AH,0H
	DIV TEN
	;CMP AL,0H
	;JZ F3_6;一位数不输出十位
	MOV DL,AL
	ADD DL,30H
	PUSH AX
	PUTCHAR;输出十位
	POP AX
F3_6:	MOV DL,AH
	ADD DL,30H
	PUTCHAR;输出个位
	MOV DL,' '
	PUTCHAR
	INC BX
	LOOP F3_4
	

END_3:	FUN_END JMP_FUN3
JMP_FUN3:
	JMP FUNCTION3
	
;********************Function4********************
FUNCTION4:

PUTENTER
	PUTS ADJUST_TIME
	PUTENTER
	
	;下面调整时间
GETHOUR:GETCHAR
	SUB AL,30H
	MUL TEN
	MOV CH,AL
	GETCHAR
	SUB AL,30H
	ADD CH,AL;H
	
	GETCHAR
	CMP AL,' ';空格结束
	JNZ GETHOUR
	
	
GETMIN:	GETCHAR
	SUB AL,30H
	MUL TEN
	MOV CL,AL
	GETCHAR
	SUB AL,30H
	ADD CL,AL;M
	
	GETCHAR
	CMP AL,' ';空格结束
	JNZ GETMIN
	
GETSEC:	GETCHAR
	SUB AL,30H
	MUL TEN
	MOV DH,AL
	GETCHAR
	SUB AL,30H
	ADD DH,AL;S
	
	GETCHAR
	CMP AL,' ';空格结束
	JNZ GETSEC
	
GETDSEC:GETCHAR
	SUB AL,30H
	MUL TEN
	MOV DL,AL
	GETCHAR
	SUB AL,30H
	ADD DL,AL;SS
	
	GETCHAR
	CMP AL,0DH;回车结束
	JNZ GETDSEC
	
	MOV AL,2DH
	
;下面输出时间
	PUSH AX
	PUSH DX
	PUTENTER
	POP DX
	POP AX
	
	MOV AH,2CH
	INT 21H
	PUSH DX
	
	MOV AH,0H
	MOV AL,CH
	DIV TEN
	MOV DL,AL
	ADD DL,30H
	PUSH AX
	PUTCHAR;H1
	POP AX
	MOV DL,AH
	ADD DL,30H
	PUTCHAR;H2
	
	MOV DL,':'
	PUTCHAR
	
	MOV AH,0H
	MOV AL,CL
	DIV TEN
	MOV DL,AL
	ADD DL,30H
	PUSH AX
	PUTCHAR;M1
	POP AX
	MOV DL,AH
	ADD DL,30H
	PUTCHAR;M2
	
	MOV DL,':'
	PUTCHAR
	
	POP DX
	MOV AH,0H
	MOV AL,DH
	PUSH DX
	DIV TEN
	MOV DL,AL
	ADD DL,30H
	PUSH AX
	PUTCHAR;S1
	POP AX
	MOV DL,AH
	ADD DL,30H
	PUTCHAR;S2
	
	MOV DL,':'
	PUTCHAR
	
	POP DX
	MOV AH,0H
	MOV AL,DL
	DIV TEN
	MOV DL,AL
	ADD DL,30H
	PUSH AX
	PUTCHAR;SS1
	POP AX
	MOV DL,AH
	ADD DL,30H
	PUTCHAR;SS2
	
END_4:	FUN_END	JMP_FUN4
JMP_FUN4:
	JMP FUNCTION4
	
;********************Function5********************
FUNCTION5:
	PUTENTER
	MOV AH,00H
	INT 21H
	FUN_END FUNCTION5

;**************************************************
DSEG ENDS